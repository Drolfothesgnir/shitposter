// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  username, 
  display_name,
  profile_img_url,
  email,
  webauthn_user_handle
) VALUES (
  $1, $1, $2, $3, $4
) RETURNING id, username, webauthn_user_handle, profile_img_url, email, created_at, is_deleted, deleted_at, display_name, archived_username, archived_email
`

type CreateUserParams struct {
	Username           string      `json:"username"`
	ProfileImgUrl      pgtype.Text `json:"profile_img_url"`
	Email              string      `json:"email"`
	WebauthnUserHandle []byte      `json:"webauthn_user_handle"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.ProfileImgUrl,
		arg.Email,
		arg.WebauthnUserHandle,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.WebauthnUserHandle,
		&i.ProfileImgUrl,
		&i.Email,
		&i.CreatedAt,
		&i.IsDeleted,
		&i.DeletedAt,
		&i.DisplayName,
		&i.ArchivedUsername,
		&i.ArchivedEmail,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :one
UPDATE users
SET
  is_deleted = TRUE,
  display_name = '[deleted]',
  deleted_at = NOW(),
  archived_username = username,
  archived_email    = email,
  username = CONCAT('deleted_user_', id),
  email    = CONCAT('deleted_', id, '@invalid.local'),
  profile_img_url = ''
WHERE id = $1 AND is_deleted = FALSE
RETURNING id, username, webauthn_user_handle, profile_img_url, email, created_at, is_deleted, deleted_at, display_name, archived_username, archived_email
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, deleteUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.WebauthnUserHandle,
		&i.ProfileImgUrl,
		&i.Email,
		&i.CreatedAt,
		&i.IsDeleted,
		&i.DeletedAt,
		&i.DisplayName,
		&i.ArchivedUsername,
		&i.ArchivedEmail,
	)
	return i, err
}

const emailExists = `-- name: EmailExists :one
SELECT EXISTS (SELECT 1 from users WHERE email = $1) AS email_exists
`

func (q *Queries) EmailExists(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRow(ctx, emailExists, email)
	var email_exists bool
	err := row.Scan(&email_exists)
	return email_exists, err
}

const getUser = `-- name: GetUser :one
SELECT id, username, webauthn_user_handle, profile_img_url, email, created_at, is_deleted, deleted_at, display_name, archived_username, archived_email FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.WebauthnUserHandle,
		&i.ProfileImgUrl,
		&i.Email,
		&i.CreatedAt,
		&i.IsDeleted,
		&i.DeletedAt,
		&i.DisplayName,
		&i.ArchivedUsername,
		&i.ArchivedEmail,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, webauthn_user_handle, profile_img_url, email, created_at, is_deleted, deleted_at, display_name, archived_username, archived_email FROM users
WHERE username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.WebauthnUserHandle,
		&i.ProfileImgUrl,
		&i.Email,
		&i.CreatedAt,
		&i.IsDeleted,
		&i.DeletedAt,
		&i.DisplayName,
		&i.ArchivedUsername,
		&i.ArchivedEmail,
	)
	return i, err
}

const usernameExists = `-- name: UsernameExists :one
SELECT EXISTS (SELECT 1 from users WHERE username = $1) AS username_exists
`

func (q *Queries) UsernameExists(ctx context.Context, username string) (bool, error) {
	row := q.db.QueryRow(ctx, usernameExists, username)
	var username_exists bool
	err := row.Scan(&username_exists)
	return username_exists, err
}
