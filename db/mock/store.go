// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Drolfothesgnir/shitposter/db/sqlc (interfaces: Store)
//
// Generated by this command:
//
//	mockgen -package mockdb -destination db/mock/store.go github.com/Drolfothesgnir/shitposter/db/sqlc Store
//

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	db "github.com/Drolfothesgnir/shitposter/db/sqlc"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
	isgomock struct{}
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateComment mocks base method.
func (m *MockStore) CreateComment(ctx context.Context, arg db.CreateCommentParams) (db.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", ctx, arg)
	ret0, _ := ret[0].(db.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockStoreMockRecorder) CreateComment(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockStore)(nil).CreateComment), ctx, arg)
}

// CreatePost mocks base method.
func (m *MockStore) CreatePost(ctx context.Context, arg db.CreatePostParams) (db.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", ctx, arg)
	ret0, _ := ret[0].(db.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockStoreMockRecorder) CreatePost(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockStore)(nil).CreatePost), ctx, arg)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(ctx context.Context, arg db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, arg)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), ctx, arg)
}

// CreateUserWithCredentialsTx mocks base method.
func (m *MockStore) CreateUserWithCredentialsTx(ctx context.Context, arg db.CreateUserWithCredentialsTxParams) (db.CreateUserWithCredentialsTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserWithCredentialsTx", ctx, arg)
	ret0, _ := ret[0].(db.CreateUserWithCredentialsTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserWithCredentialsTx indicates an expected call of CreateUserWithCredentialsTx.
func (mr *MockStoreMockRecorder) CreateUserWithCredentialsTx(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserWithCredentialsTx", reflect.TypeOf((*MockStore)(nil).CreateUserWithCredentialsTx), ctx, arg)
}

// CreateWebauthnCredentials mocks base method.
func (m *MockStore) CreateWebauthnCredentials(ctx context.Context, arg db.CreateWebauthnCredentialsParams) (db.WebauthnCredential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWebauthnCredentials", ctx, arg)
	ret0, _ := ret[0].(db.WebauthnCredential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWebauthnCredentials indicates an expected call of CreateWebauthnCredentials.
func (mr *MockStoreMockRecorder) CreateWebauthnCredentials(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWebauthnCredentials", reflect.TypeOf((*MockStore)(nil).CreateWebauthnCredentials), ctx, arg)
}

// DeleteComment mocks base method.
func (m *MockStore) DeleteComment(ctx context.Context, id int64) (db.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", ctx, id)
	ret0, _ := ret[0].(db.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockStoreMockRecorder) DeleteComment(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockStore)(nil).DeleteComment), ctx, id)
}

// DeleteCommentVote mocks base method.
func (m *MockStore) DeleteCommentVote(ctx context.Context, arg db.DeleteCommentVoteParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCommentVote", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCommentVote indicates an expected call of DeleteCommentVote.
func (mr *MockStoreMockRecorder) DeleteCommentVote(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCommentVote", reflect.TypeOf((*MockStore)(nil).DeleteCommentVote), ctx, arg)
}

// DeletePost mocks base method.
func (m *MockStore) DeletePost(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePost", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePost indicates an expected call of DeletePost.
func (mr *MockStoreMockRecorder) DeletePost(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockStore)(nil).DeletePost), ctx, id)
}

// DeletePostVote mocks base method.
func (m *MockStore) DeletePostVote(ctx context.Context, arg db.DeletePostVoteParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePostVote", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePostVote indicates an expected call of DeletePostVote.
func (mr *MockStoreMockRecorder) DeletePostVote(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePostVote", reflect.TypeOf((*MockStore)(nil).DeletePostVote), ctx, arg)
}

// EmailExists mocks base method.
func (m *MockStore) EmailExists(ctx context.Context, email string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EmailExists", ctx, email)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EmailExists indicates an expected call of EmailExists.
func (mr *MockStoreMockRecorder) EmailExists(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmailExists", reflect.TypeOf((*MockStore)(nil).EmailExists), ctx, email)
}

// GetComment mocks base method.
func (m *MockStore) GetComment(ctx context.Context, id int64) (db.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComment", ctx, id)
	ret0, _ := ret[0].(db.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComment indicates an expected call of GetComment.
func (mr *MockStoreMockRecorder) GetComment(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComment", reflect.TypeOf((*MockStore)(nil).GetComment), ctx, id)
}

// GetCommentVote mocks base method.
func (m *MockStore) GetCommentVote(ctx context.Context, arg db.GetCommentVoteParams) (db.CommentVote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentVote", ctx, arg)
	ret0, _ := ret[0].(db.CommentVote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentVote indicates an expected call of GetCommentVote.
func (mr *MockStoreMockRecorder) GetCommentVote(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentVote", reflect.TypeOf((*MockStore)(nil).GetCommentVote), ctx, arg)
}

// GetCommentsByPopularity mocks base method.
func (m *MockStore) GetCommentsByPopularity(ctx context.Context, arg db.GetCommentsByPopularityParams) ([]db.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentsByPopularity", ctx, arg)
	ret0, _ := ret[0].([]db.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentsByPopularity indicates an expected call of GetCommentsByPopularity.
func (mr *MockStoreMockRecorder) GetCommentsByPopularity(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentsByPopularity", reflect.TypeOf((*MockStore)(nil).GetCommentsByPopularity), ctx, arg)
}

// GetNewestPosts mocks base method.
func (m *MockStore) GetNewestPosts(ctx context.Context, arg db.GetNewestPostsParams) ([]db.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNewestPosts", ctx, arg)
	ret0, _ := ret[0].([]db.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNewestPosts indicates an expected call of GetNewestPosts.
func (mr *MockStoreMockRecorder) GetNewestPosts(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewestPosts", reflect.TypeOf((*MockStore)(nil).GetNewestPosts), ctx, arg)
}

// GetOldestPosts mocks base method.
func (m *MockStore) GetOldestPosts(ctx context.Context, arg db.GetOldestPostsParams) ([]db.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOldestPosts", ctx, arg)
	ret0, _ := ret[0].([]db.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOldestPosts indicates an expected call of GetOldestPosts.
func (mr *MockStoreMockRecorder) GetOldestPosts(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOldestPosts", reflect.TypeOf((*MockStore)(nil).GetOldestPosts), ctx, arg)
}

// GetPost mocks base method.
func (m *MockStore) GetPost(ctx context.Context, id int64) (db.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPost", ctx, id)
	ret0, _ := ret[0].(db.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPost indicates an expected call of GetPost.
func (mr *MockStoreMockRecorder) GetPost(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPost", reflect.TypeOf((*MockStore)(nil).GetPost), ctx, id)
}

// GetPostVote mocks base method.
func (m *MockStore) GetPostVote(ctx context.Context, arg db.GetPostVoteParams) (db.PostVote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostVote", ctx, arg)
	ret0, _ := ret[0].(db.PostVote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostVote indicates an expected call of GetPostVote.
func (mr *MockStoreMockRecorder) GetPostVote(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostVote", reflect.TypeOf((*MockStore)(nil).GetPostVote), ctx, arg)
}

// GetPostsByPopularity mocks base method.
func (m *MockStore) GetPostsByPopularity(ctx context.Context, arg db.GetPostsByPopularityParams) ([]db.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostsByPopularity", ctx, arg)
	ret0, _ := ret[0].([]db.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostsByPopularity indicates an expected call of GetPostsByPopularity.
func (mr *MockStoreMockRecorder) GetPostsByPopularity(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostsByPopularity", reflect.TypeOf((*MockStore)(nil).GetPostsByPopularity), ctx, arg)
}

// GetUser mocks base method.
func (m *MockStore) GetUser(ctx context.Context, id int64) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, id)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoreMockRecorder) GetUser(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), ctx, id)
}

// GetUserByUsername mocks base method.
func (m *MockStore) GetUserByUsername(ctx context.Context, username string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", ctx, username)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockStoreMockRecorder) GetUserByUsername(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockStore)(nil).GetUserByUsername), ctx, username)
}

// GetUserCredentials mocks base method.
func (m *MockStore) GetUserCredentials(ctx context.Context, userID int64) ([]db.WebauthnCredential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserCredentials", ctx, userID)
	ret0, _ := ret[0].([]db.WebauthnCredential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserCredentials indicates an expected call of GetUserCredentials.
func (mr *MockStoreMockRecorder) GetUserCredentials(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserCredentials", reflect.TypeOf((*MockStore)(nil).GetUserCredentials), ctx, userID)
}

// Shutdown mocks base method.
func (m *MockStore) Shutdown() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Shutdown")
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockStoreMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockStore)(nil).Shutdown))
}

// UpdateComment mocks base method.
func (m *MockStore) UpdateComment(ctx context.Context, arg db.UpdateCommentParams) (db.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateComment", ctx, arg)
	ret0, _ := ret[0].(db.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateComment indicates an expected call of UpdateComment.
func (mr *MockStoreMockRecorder) UpdateComment(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComment", reflect.TypeOf((*MockStore)(nil).UpdateComment), ctx, arg)
}

// UpdatePost mocks base method.
func (m *MockStore) UpdatePost(ctx context.Context, arg db.UpdatePostParams) (db.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePost", ctx, arg)
	ret0, _ := ret[0].(db.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePost indicates an expected call of UpdatePost.
func (mr *MockStoreMockRecorder) UpdatePost(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePost", reflect.TypeOf((*MockStore)(nil).UpdatePost), ctx, arg)
}

// UsernameExists mocks base method.
func (m *MockStore) UsernameExists(ctx context.Context, username string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UsernameExists", ctx, username)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsernameExists indicates an expected call of UsernameExists.
func (mr *MockStoreMockRecorder) UsernameExists(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsernameExists", reflect.TypeOf((*MockStore)(nil).UsernameExists), ctx, username)
}

// VoteComment mocks base method.
func (m *MockStore) VoteComment(ctx context.Context, arg db.VoteCommentParams) (db.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VoteComment", ctx, arg)
	ret0, _ := ret[0].(db.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VoteComment indicates an expected call of VoteComment.
func (mr *MockStoreMockRecorder) VoteComment(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VoteComment", reflect.TypeOf((*MockStore)(nil).VoteComment), ctx, arg)
}

// VotePost mocks base method.
func (m *MockStore) VotePost(ctx context.Context, arg db.VotePostParams) (db.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VotePost", ctx, arg)
	ret0, _ := ret[0].(db.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VotePost indicates an expected call of VotePost.
func (mr *MockStoreMockRecorder) VotePost(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VotePost", reflect.TypeOf((*MockStore)(nil).VotePost), ctx, arg)
}
