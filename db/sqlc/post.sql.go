// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: post.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (
  user_id, 
  title,
  topics,
  body
) VALUES (
  $1, $2, $3, $4
) RETURNING id, user_id, title, topics, body, upvotes, downvotes, created_at, last_modified_at
`

type CreatePostParams struct {
	UserID int64  `json:"user_id"`
	Title  string `json:"title"`
	Topics []byte `json:"topics"`
	Body   []byte `json:"body"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRow(ctx, createPost,
		arg.UserID,
		arg.Title,
		arg.Topics,
		arg.Body,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Topics,
		&i.Body,
		&i.Upvotes,
		&i.Downvotes,
		&i.CreatedAt,
		&i.LastModifiedAt,
	)
	return i, err
}

const deletePostVote = `-- name: DeletePostVote :exec
SELECT delete_post_vote(
  p_post_id := $1,
  p_user_id := $2
)
`

type DeletePostVoteParams struct {
	PPostID int64 `json:"p_post_id"`
	PUserID int64 `json:"p_user_id"`
}

func (q *Queries) DeletePostVote(ctx context.Context, arg DeletePostVoteParams) error {
	_, err := q.db.Exec(ctx, deletePostVote, arg.PPostID, arg.PUserID)
	return err
}

const getNewestPosts = `-- name: GetNewestPosts :many
SELECT id, user_id, title, topics, body, upvotes, downvotes, created_at, last_modified_at FROM posts
ORDER BY created_at DESC
LIMIT $1
OFFSET $2
`

type GetNewestPostsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetNewestPosts(ctx context.Context, arg GetNewestPostsParams) ([]Post, error) {
	rows, err := q.db.Query(ctx, getNewestPosts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Post{}
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Topics,
			&i.Body,
			&i.Upvotes,
			&i.Downvotes,
			&i.CreatedAt,
			&i.LastModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOldestPosts = `-- name: GetOldestPosts :many
SELECT id, user_id, title, topics, body, upvotes, downvotes, created_at, last_modified_at FROM posts
ORDER BY created_at ASC
LIMIT $1
OFFSET $2
`

type GetOldestPostsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetOldestPosts(ctx context.Context, arg GetOldestPostsParams) ([]Post, error) {
	rows, err := q.db.Query(ctx, getOldestPosts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Post{}
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Topics,
			&i.Body,
			&i.Upvotes,
			&i.Downvotes,
			&i.CreatedAt,
			&i.LastModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPost = `-- name: GetPost :one
SELECT id, user_id, title, topics, body, upvotes, downvotes, created_at, last_modified_at FROM posts
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPost(ctx context.Context, id int64) (Post, error) {
	row := q.db.QueryRow(ctx, getPost, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Topics,
		&i.Body,
		&i.Upvotes,
		&i.Downvotes,
		&i.CreatedAt,
		&i.LastModifiedAt,
	)
	return i, err
}

const getPostsByPopularity = `-- name: GetPostsByPopularity :many
SELECT id, user_id, title, topics, body, upvotes, downvotes, created_at, last_modified_at FROM posts
WHERE created_at >= (NOW() - $3::INTERVAL)
ORDER BY (upvotes - downvotes) DESC
LIMIT $1
OFFSET $2
`

type GetPostsByPopularityParams struct {
	Limit    int32           `json:"limit"`
	Offset   int32           `json:"offset"`
	Interval pgtype.Interval `json:"interval"`
}

func (q *Queries) GetPostsByPopularity(ctx context.Context, arg GetPostsByPopularityParams) ([]Post, error) {
	rows, err := q.db.Query(ctx, getPostsByPopularity, arg.Limit, arg.Offset, arg.Interval)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Post{}
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Topics,
			&i.Body,
			&i.Upvotes,
			&i.Downvotes,
			&i.CreatedAt,
			&i.LastModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePost = `-- name: UpdatePost :one
UPDATE posts
SET 
  title = COALESCE($2, title),
  body = COALESCE($3, body),
  topics = COALESCE($4, topics),
  upvotes = upvotes + COALESCE($5, 0),
  downvotes = downvotes + COALESCE($6, 0),
  last_modified_at = NOW()
WHERE id = $1
RETURNING id, user_id, title, topics, body, upvotes, downvotes, created_at, last_modified_at
`

type UpdatePostParams struct {
	ID             int64       `json:"id"`
	Title          pgtype.Text `json:"title"`
	Body           []byte      `json:"body"`
	Topics         []byte      `json:"topics"`
	DeltaUpvotes   pgtype.Int8 `json:"delta_upvotes"`
	DeltaDownvotes pgtype.Int8 `json:"delta_downvotes"`
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) (Post, error) {
	row := q.db.QueryRow(ctx, updatePost,
		arg.ID,
		arg.Title,
		arg.Body,
		arg.Topics,
		arg.DeltaUpvotes,
		arg.DeltaDownvotes,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Topics,
		&i.Body,
		&i.Upvotes,
		&i.Downvotes,
		&i.CreatedAt,
		&i.LastModifiedAt,
	)
	return i, err
}

const votePost = `-- name: VotePost :one
SELECT id, user_id, title, topics, body, upvotes, downvotes, created_at, last_modified_at FROM vote_post(
  p_user_id := $1,
  p_post_id := $2,
  p_vote := $3   
)
`

type VotePostParams struct {
	PUserID int64 `json:"p_user_id"`
	PPostID int64 `json:"p_post_id"`
	PVote   int32 `json:"p_vote"`
}

func (q *Queries) VotePost(ctx context.Context, arg VotePostParams) (Post, error) {
	row := q.db.QueryRow(ctx, votePost, arg.PUserID, arg.PPostID, arg.PVote)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Topics,
		&i.Body,
		&i.Upvotes,
		&i.Downvotes,
		&i.CreatedAt,
		&i.LastModifiedAt,
	)
	return i, err
}
