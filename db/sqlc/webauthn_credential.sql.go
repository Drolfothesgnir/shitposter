// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: webauthn_credential.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createWebauthnCredentials = `-- name: CreateWebauthnCredentials :one
INSERT INTO webauthn_credentials (
  id,
  user_id,                  
  public_key,               
  attestation_type,         
  transports,               
  user_present,             
  user_verified,            
  backup_eligible,          
  backup_state,             
  aaguid,                   
  sign_count,               
  clone_warning,            
  authenticator_attachment, 
  authenticator_data,       
  public_key_algorithm
) VALUES (
  $1, $2, $3, $4, $5,
  $6, $7, $8, $9, $10,
  $11, $12, $13, $14, $15
) RETURNING id, user_id, public_key, attestation_type, transports, user_present, user_verified, backup_eligible, backup_state, aaguid, sign_count, clone_warning, authenticator_attachment, authenticator_data, public_key_algorithm, created_at, last_used_at
`

type CreateWebauthnCredentialsParams struct {
	ID                      []byte                  `json:"id"`
	UserID                  int64                   `json:"user_id"`
	PublicKey               []byte                  `json:"public_key"`
	AttestationType         pgtype.Text             `json:"attestation_type"`
	Transports              []byte                  `json:"transports"`
	UserPresent             bool                    `json:"user_present"`
	UserVerified            bool                    `json:"user_verified"`
	BackupEligible          bool                    `json:"backup_eligible"`
	BackupState             bool                    `json:"backup_state"`
	Aaguid                  uuid.UUID               `json:"aaguid"`
	SignCount               int64                   `json:"sign_count"`
	CloneWarning            bool                    `json:"clone_warning"`
	AuthenticatorAttachment AuthenticatorAttachment `json:"authenticator_attachment"`
	AuthenticatorData       []byte                  `json:"authenticator_data"`
	PublicKeyAlgorithm      int32                   `json:"public_key_algorithm"`
}

func (q *Queries) CreateWebauthnCredentials(ctx context.Context, arg CreateWebauthnCredentialsParams) (WebauthnCredential, error) {
	row := q.db.QueryRow(ctx, createWebauthnCredentials,
		arg.ID,
		arg.UserID,
		arg.PublicKey,
		arg.AttestationType,
		arg.Transports,
		arg.UserPresent,
		arg.UserVerified,
		arg.BackupEligible,
		arg.BackupState,
		arg.Aaguid,
		arg.SignCount,
		arg.CloneWarning,
		arg.AuthenticatorAttachment,
		arg.AuthenticatorData,
		arg.PublicKeyAlgorithm,
	)
	var i WebauthnCredential
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PublicKey,
		&i.AttestationType,
		&i.Transports,
		&i.UserPresent,
		&i.UserVerified,
		&i.BackupEligible,
		&i.BackupState,
		&i.Aaguid,
		&i.SignCount,
		&i.CloneWarning,
		&i.AuthenticatorAttachment,
		&i.AuthenticatorData,
		&i.PublicKeyAlgorithm,
		&i.CreatedAt,
		&i.LastUsedAt,
	)
	return i, err
}

const deleteUserCredentials = `-- name: DeleteUserCredentials :exec
DELETE FROM webauthn_credentials
WHERE user_id = $1
`

func (q *Queries) DeleteUserCredentials(ctx context.Context, userID int64) error {
	_, err := q.db.Exec(ctx, deleteUserCredentials, userID)
	return err
}

const getUserCredentials = `-- name: GetUserCredentials :many
SELECT id, user_id, public_key, attestation_type, transports, user_present, user_verified, backup_eligible, backup_state, aaguid, sign_count, clone_warning, authenticator_attachment, authenticator_data, public_key_algorithm, created_at, last_used_at FROM webauthn_credentials
WHERE user_id = $1
`

func (q *Queries) GetUserCredentials(ctx context.Context, userID int64) ([]WebauthnCredential, error) {
	rows, err := q.db.Query(ctx, getUserCredentials, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []WebauthnCredential{}
	for rows.Next() {
		var i WebauthnCredential
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.PublicKey,
			&i.AttestationType,
			&i.Transports,
			&i.UserPresent,
			&i.UserVerified,
			&i.BackupEligible,
			&i.BackupState,
			&i.Aaguid,
			&i.SignCount,
			&i.CloneWarning,
			&i.AuthenticatorAttachment,
			&i.AuthenticatorData,
			&i.PublicKeyAlgorithm,
			&i.CreatedAt,
			&i.LastUsedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserCredentials = `-- name: ListUserCredentials :many
SELECT id, user_id, public_key, attestation_type, transports, user_present, user_verified, backup_eligible, backup_state, aaguid, sign_count, clone_warning, authenticator_attachment, authenticator_data, public_key_algorithm, created_at, last_used_at FROM webauthn_credentials
WHERE user_id = $1
`

func (q *Queries) ListUserCredentials(ctx context.Context, userID int64) ([]WebauthnCredential, error) {
	rows, err := q.db.Query(ctx, listUserCredentials, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []WebauthnCredential{}
	for rows.Next() {
		var i WebauthnCredential
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.PublicKey,
			&i.AttestationType,
			&i.Transports,
			&i.UserPresent,
			&i.UserVerified,
			&i.BackupEligible,
			&i.BackupState,
			&i.Aaguid,
			&i.SignCount,
			&i.CloneWarning,
			&i.AuthenticatorAttachment,
			&i.AuthenticatorData,
			&i.PublicKeyAlgorithm,
			&i.CreatedAt,
			&i.LastUsedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCredentialSignCount = `-- name: UpdateCredentialSignCount :exec
UPDATE webauthn_credentials
SET
  sign_count = $2
WHERE id = $1
`

type UpdateCredentialSignCountParams struct {
	ID        []byte `json:"id"`
	SignCount int64  `json:"sign_count"`
}

func (q *Queries) UpdateCredentialSignCount(ctx context.Context, arg UpdateCredentialSignCountParams) error {
	_, err := q.db.Exec(ctx, updateCredentialSignCount, arg.ID, arg.SignCount)
	return err
}
