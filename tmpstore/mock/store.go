// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Drolfothesgnir/shitposter/tmpstore (interfaces: Store)
//
// Generated by this command:
//
//	mockgen -package mockst -destination tmpstore/mock/store.go github.com/Drolfothesgnir/shitposter/tmpstore Store
//

// Package mockst is a generated GoMock package.
package mockst

import (
	context "context"
	reflect "reflect"
	time "time"

	tmpstore "github.com/Drolfothesgnir/shitposter/tmpstore"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
	isgomock struct{}
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// DeleteUserAuthSession mocks base method.
func (m *MockStore) DeleteUserAuthSession(ctx context.Context, sessionID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserAuthSession", ctx, sessionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserAuthSession indicates an expected call of DeleteUserAuthSession.
func (mr *MockStoreMockRecorder) DeleteUserAuthSession(ctx, sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserAuthSession", reflect.TypeOf((*MockStore)(nil).DeleteUserAuthSession), ctx, sessionID)
}

// DeleteUserRegSession mocks base method.
func (m *MockStore) DeleteUserRegSession(ctx context.Context, sessionID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserRegSession", ctx, sessionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserRegSession indicates an expected call of DeleteUserRegSession.
func (mr *MockStoreMockRecorder) DeleteUserRegSession(ctx, sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserRegSession", reflect.TypeOf((*MockStore)(nil).DeleteUserRegSession), ctx, sessionID)
}

// GetUserAuthSession mocks base method.
func (m *MockStore) GetUserAuthSession(ctx context.Context, sessionID string) (*tmpstore.PendingAuthentication, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAuthSession", ctx, sessionID)
	ret0, _ := ret[0].(*tmpstore.PendingAuthentication)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAuthSession indicates an expected call of GetUserAuthSession.
func (mr *MockStoreMockRecorder) GetUserAuthSession(ctx, sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAuthSession", reflect.TypeOf((*MockStore)(nil).GetUserAuthSession), ctx, sessionID)
}

// GetUserRegSession mocks base method.
func (m *MockStore) GetUserRegSession(ctx context.Context, sessionID string) (*tmpstore.PendingRegistration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRegSession", ctx, sessionID)
	ret0, _ := ret[0].(*tmpstore.PendingRegistration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserRegSession indicates an expected call of GetUserRegSession.
func (mr *MockStoreMockRecorder) GetUserRegSession(ctx, sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRegSession", reflect.TypeOf((*MockStore)(nil).GetUserRegSession), ctx, sessionID)
}

// SaveUserAuthSession mocks base method.
func (m *MockStore) SaveUserAuthSession(ctx context.Context, sessionID string, data tmpstore.PendingAuthentication, ttl time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUserAuthSession", ctx, sessionID, data, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveUserAuthSession indicates an expected call of SaveUserAuthSession.
func (mr *MockStoreMockRecorder) SaveUserAuthSession(ctx, sessionID, data, ttl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUserAuthSession", reflect.TypeOf((*MockStore)(nil).SaveUserAuthSession), ctx, sessionID, data, ttl)
}

// SaveUserRegSession mocks base method.
func (m *MockStore) SaveUserRegSession(ctx context.Context, sessionID string, data tmpstore.PendingRegistration, ttl time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUserRegSession", ctx, sessionID, data, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveUserRegSession indicates an expected call of SaveUserRegSession.
func (mr *MockStoreMockRecorder) SaveUserRegSession(ctx, sessionID, data, ttl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUserRegSession", reflect.TypeOf((*MockStore)(nil).SaveUserRegSession), ctx, sessionID, data, ttl)
}
