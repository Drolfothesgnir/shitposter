// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package db

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type AuthenticatorAttachment string

const (
	AuthenticatorAttachmentPlatform      AuthenticatorAttachment = "platform"
	AuthenticatorAttachmentCrossPlatform AuthenticatorAttachment = "cross-platform"
)

func (e *AuthenticatorAttachment) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AuthenticatorAttachment(s)
	case string:
		*e = AuthenticatorAttachment(s)
	default:
		return fmt.Errorf("unsupported scan type for AuthenticatorAttachment: %T", src)
	}
	return nil
}

type NullAuthenticatorAttachment struct {
	AuthenticatorAttachment AuthenticatorAttachment `json:"authenticator_attachment"`
	Valid                   bool                    `json:"valid"` // Valid is true if AuthenticatorAttachment is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAuthenticatorAttachment) Scan(value interface{}) error {
	if value == nil {
		ns.AuthenticatorAttachment, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AuthenticatorAttachment.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAuthenticatorAttachment) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AuthenticatorAttachment), nil
}

type Comment struct {
	ID             int64       `json:"id"`
	UserID         int64       `json:"user_id"`
	PostID         int64       `json:"post_id"`
	ParentID       pgtype.Int8 `json:"parent_id"`
	Depth          int32       `json:"depth"`
	Upvotes        int64       `json:"upvotes"`
	Downvotes      int64       `json:"downvotes"`
	Body           string      `json:"body"`
	CreatedAt      time.Time   `json:"created_at"`
	LastModifiedAt time.Time   `json:"last_modified_at"`
	IsDeleted      bool        `json:"is_deleted"`
	DeletedAt      time.Time   `json:"deleted_at"`
	Popularity     pgtype.Int8 `json:"popularity"`
}

type CommentVote struct {
	ID        int64 `json:"id"`
	UserID    int64 `json:"user_id"`
	CommentID int64 `json:"comment_id"`
	// 1 for upvote, -1 for downvote
	Vote           int16     `json:"vote"`
	CreatedAt      time.Time `json:"created_at"`
	LastModifiedAt time.Time `json:"last_modified_at"`
}

type Post struct {
	ID             int64       `json:"id"`
	UserID         int64       `json:"user_id"`
	Title          string      `json:"title"`
	Topics         []byte      `json:"topics"`
	Body           []byte      `json:"body"`
	Upvotes        int64       `json:"upvotes"`
	Downvotes      int64       `json:"downvotes"`
	CreatedAt      time.Time   `json:"created_at"`
	LastModifiedAt time.Time   `json:"last_modified_at"`
	Popularity     pgtype.Int8 `json:"popularity"`
}

type PostVote struct {
	ID     int64 `json:"id"`
	UserID int64 `json:"user_id"`
	PostID int64 `json:"post_id"`
	// 1 for upvote, -1 for downvote
	Vote           int16     `json:"vote"`
	CreatedAt      time.Time `json:"created_at"`
	LastModifiedAt time.Time `json:"last_modified_at"`
}

type Session struct {
	ID           uuid.UUID `json:"id"`
	UserID       int64     `json:"user_id"`
	RefreshToken string    `json:"refresh_token"`
	UserAgent    string    `json:"user_agent"`
	ClientIp     string    `json:"client_ip"`
	IsBlocked    bool      `json:"is_blocked"`
	ExpiresAt    time.Time `json:"expires_at"`
	CreatedAt    time.Time `json:"created_at"`
}

type User struct {
	ID                 int64       `json:"id"`
	Username           string      `json:"username"`
	WebauthnUserHandle []byte      `json:"webauthn_user_handle"`
	ProfileImgUrl      pgtype.Text `json:"profile_img_url"`
	Email              string      `json:"email"`
	CreatedAt          time.Time   `json:"created_at"`
}

type WebauthnCredential struct {
	ID                      []byte                  `json:"id"`
	UserID                  int64                   `json:"user_id"`
	PublicKey               []byte                  `json:"public_key"`
	AttestationType         pgtype.Text             `json:"attestation_type"`
	Transports              []byte                  `json:"transports"`
	UserPresent             bool                    `json:"user_present"`
	UserVerified            bool                    `json:"user_verified"`
	BackupEligible          bool                    `json:"backup_eligible"`
	BackupState             bool                    `json:"backup_state"`
	Aaguid                  uuid.UUID               `json:"aaguid"`
	SignCount               int64                   `json:"sign_count"`
	CloneWarning            bool                    `json:"clone_warning"`
	AuthenticatorAttachment AuthenticatorAttachment `json:"authenticator_attachment"`
	AuthenticatorData       []byte                  `json:"authenticator_data"`
	PublicKeyAlgorithm      int32                   `json:"public_key_algorithm"`
	CreatedAt               time.Time               `json:"created_at"`
	LastUsedAt              pgtype.Timestamptz      `json:"last_used_at"`
}
