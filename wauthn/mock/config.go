// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Drolfothesgnir/shitposter/wauthn (interfaces: WebAuthnConfig)
//
// Generated by this command:
//
//	mockgen -package mockwa -destination wauthn/mock/config.go github.com/Drolfothesgnir/shitposter/wauthn WebAuthnConfig
//

// Package mockwa is a generated GoMock package.
package mockwa

import (
	http "net/http"
	reflect "reflect"

	protocol "github.com/go-webauthn/webauthn/protocol"
	webauthn "github.com/go-webauthn/webauthn/webauthn"
	gomock "go.uber.org/mock/gomock"
)

// MockWebAuthnConfig is a mock of WebAuthnConfig interface.
type MockWebAuthnConfig struct {
	ctrl     *gomock.Controller
	recorder *MockWebAuthnConfigMockRecorder
	isgomock struct{}
}

// MockWebAuthnConfigMockRecorder is the mock recorder for MockWebAuthnConfig.
type MockWebAuthnConfigMockRecorder struct {
	mock *MockWebAuthnConfig
}

// NewMockWebAuthnConfig creates a new mock instance.
func NewMockWebAuthnConfig(ctrl *gomock.Controller) *MockWebAuthnConfig {
	mock := &MockWebAuthnConfig{ctrl: ctrl}
	mock.recorder = &MockWebAuthnConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebAuthnConfig) EXPECT() *MockWebAuthnConfigMockRecorder {
	return m.recorder
}

// BeginLogin mocks base method.
func (m *MockWebAuthnConfig) BeginLogin(user webauthn.User, opts ...webauthn.LoginOption) (*protocol.CredentialAssertion, *webauthn.SessionData, error) {
	m.ctrl.T.Helper()
	varargs := []any{user}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BeginLogin", varargs...)
	ret0, _ := ret[0].(*protocol.CredentialAssertion)
	ret1, _ := ret[1].(*webauthn.SessionData)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// BeginLogin indicates an expected call of BeginLogin.
func (mr *MockWebAuthnConfigMockRecorder) BeginLogin(user any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{user}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginLogin", reflect.TypeOf((*MockWebAuthnConfig)(nil).BeginLogin), varargs...)
}

// BeginRegistration mocks base method.
func (m *MockWebAuthnConfig) BeginRegistration(user webauthn.User, opts ...webauthn.RegistrationOption) (*protocol.CredentialCreation, *webauthn.SessionData, error) {
	m.ctrl.T.Helper()
	varargs := []any{user}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BeginRegistration", varargs...)
	ret0, _ := ret[0].(*protocol.CredentialCreation)
	ret1, _ := ret[1].(*webauthn.SessionData)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// BeginRegistration indicates an expected call of BeginRegistration.
func (mr *MockWebAuthnConfigMockRecorder) BeginRegistration(user any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{user}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginRegistration", reflect.TypeOf((*MockWebAuthnConfig)(nil).BeginRegistration), varargs...)
}

// FinishLogin mocks base method.
func (m *MockWebAuthnConfig) FinishLogin(user webauthn.User, session webauthn.SessionData, response *http.Request) (*webauthn.Credential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinishLogin", user, session, response)
	ret0, _ := ret[0].(*webauthn.Credential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FinishLogin indicates an expected call of FinishLogin.
func (mr *MockWebAuthnConfigMockRecorder) FinishLogin(user, session, response any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishLogin", reflect.TypeOf((*MockWebAuthnConfig)(nil).FinishLogin), user, session, response)
}

// FinishRegistration mocks base method.
func (m *MockWebAuthnConfig) FinishRegistration(user webauthn.User, session webauthn.SessionData, request *http.Request) (*webauthn.Credential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinishRegistration", user, session, request)
	ret0, _ := ret[0].(*webauthn.Credential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FinishRegistration indicates an expected call of FinishRegistration.
func (mr *MockWebAuthnConfigMockRecorder) FinishRegistration(user, session, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishRegistration", reflect.TypeOf((*MockWebAuthnConfig)(nil).FinishRegistration), user, session, request)
}
