// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  username, 
  profile_img_url,
  email,
  webauthn_user_handle
) VALUES (
  $1, $2, $3, $4
) RETURNING id, username, webauthn_user_handle, profile_img_url, email, created_at
`

type CreateUserParams struct {
	Username           string      `json:"username"`
	ProfileImgUrl      pgtype.Text `json:"profile_img_url"`
	Email              string      `json:"email"`
	WebauthnUserHandle []byte      `json:"webauthn_user_handle"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.ProfileImgUrl,
		arg.Email,
		arg.WebauthnUserHandle,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.WebauthnUserHandle,
		&i.ProfileImgUrl,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const emailExists = `-- name: EmailExists :one
SELECT EXISTS (SELECT 1 from users WHERE email = $1) AS email_exists
`

func (q *Queries) EmailExists(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRow(ctx, emailExists, email)
	var email_exists bool
	err := row.Scan(&email_exists)
	return email_exists, err
}

const getUser = `-- name: GetUser :one
SELECT id, username, webauthn_user_handle, profile_img_url, email, created_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.WebauthnUserHandle,
		&i.ProfileImgUrl,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const usernameExists = `-- name: UsernameExists :one
SELECT EXISTS (SELECT 1 from users WHERE username = $1) AS username_exists
`

func (q *Queries) UsernameExists(ctx context.Context, username string) (bool, error) {
	row := q.db.QueryRow(ctx, usernameExists, username)
	var username_exists bool
	err := row.Scan(&username_exists)
	return username_exists, err
}
