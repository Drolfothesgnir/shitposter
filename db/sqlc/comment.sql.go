// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: comment.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createComment = `-- name: CreateComment :one
SELECT id, user_id, post_id, parent_id, depth, upvotes, downvotes, body, created_at, last_modified_at, is_deleted, deleted_at, popularity FROM insert_comment(
  p_user_id := $1,
  p_post_id := $2,
  p_body := $3,
  p_parent_id := $4,
  p_upvotes := $5,
  p_downvotes := $6
)
`

type CreateCommentParams struct {
	PUserID    int64       `json:"p_user_id"`
	PPostID    int64       `json:"p_post_id"`
	PBody      string      `json:"p_body"`
	PParentID  pgtype.Int8 `json:"p_parent_id"`
	PUpvotes   pgtype.Int8 `json:"p_upvotes"`
	PDownvotes pgtype.Int8 `json:"p_downvotes"`
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.db.QueryRow(ctx, createComment,
		arg.PUserID,
		arg.PPostID,
		arg.PBody,
		arg.PParentID,
		arg.PUpvotes,
		arg.PDownvotes,
	)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PostID,
		&i.ParentID,
		&i.Depth,
		&i.Upvotes,
		&i.Downvotes,
		&i.Body,
		&i.CreatedAt,
		&i.LastModifiedAt,
		&i.IsDeleted,
		&i.DeletedAt,
		&i.Popularity,
	)
	return i, err
}

const deleteComment = `-- name: DeleteComment :one
UPDATE comments
SET 
  body = '[deleted]',
  is_deleted = true,
  deleted_at = NOW(),
  last_modified_at = NOW()
WHERE id = $1
RETURNING id, user_id, post_id, parent_id, depth, upvotes, downvotes, body, created_at, last_modified_at, is_deleted, deleted_at, popularity
`

func (q *Queries) DeleteComment(ctx context.Context, id int64) (Comment, error) {
	row := q.db.QueryRow(ctx, deleteComment, id)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PostID,
		&i.ParentID,
		&i.Depth,
		&i.Upvotes,
		&i.Downvotes,
		&i.Body,
		&i.CreatedAt,
		&i.LastModifiedAt,
		&i.IsDeleted,
		&i.DeletedAt,
		&i.Popularity,
	)
	return i, err
}

const deleteCommentVote = `-- name: DeleteCommentVote :exec
SELECT delete_comment_vote(
  p_comment_id := $1,
  p_user_id := $2
)
`

type DeleteCommentVoteParams struct {
	PCommentID int64 `json:"p_comment_id"`
	PUserID    int64 `json:"p_user_id"`
}

func (q *Queries) DeleteCommentVote(ctx context.Context, arg DeleteCommentVoteParams) error {
	_, err := q.db.Exec(ctx, deleteCommentVote, arg.PCommentID, arg.PUserID)
	return err
}

const getComment = `-- name: GetComment :one
SELECT id, user_id, post_id, parent_id, depth, upvotes, downvotes, body, created_at, last_modified_at, is_deleted, deleted_at, popularity FROM comments
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetComment(ctx context.Context, id int64) (Comment, error) {
	row := q.db.QueryRow(ctx, getComment, id)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PostID,
		&i.ParentID,
		&i.Depth,
		&i.Upvotes,
		&i.Downvotes,
		&i.Body,
		&i.CreatedAt,
		&i.LastModifiedAt,
		&i.IsDeleted,
		&i.DeletedAt,
		&i.Popularity,
	)
	return i, err
}

const getCommentsByPopularity = `-- name: GetCommentsByPopularity :many
SELECT id, user_id, post_id, parent_id, depth, upvotes, downvotes, body, created_at, last_modified_at, is_deleted, deleted_at, popularity FROM get_comments_by_popularity(
  p_post_id := $1,
  p_root_limit := $2
)
`

type GetCommentsByPopularityParams struct {
	PPostID    int64 `json:"p_post_id"`
	PRootLimit int32 `json:"p_root_limit"`
}

func (q *Queries) GetCommentsByPopularity(ctx context.Context, arg GetCommentsByPopularityParams) ([]Comment, error) {
	rows, err := q.db.Query(ctx, getCommentsByPopularity, arg.PPostID, arg.PRootLimit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Comment{}
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.PostID,
			&i.ParentID,
			&i.Depth,
			&i.Upvotes,
			&i.Downvotes,
			&i.Body,
			&i.CreatedAt,
			&i.LastModifiedAt,
			&i.IsDeleted,
			&i.DeletedAt,
			&i.Popularity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateComment = `-- name: UpdateComment :one
UPDATE comments
SET
  body = $2,
  last_modified_at = NOW()
WHERE id = $1
RETURNING id, user_id, post_id, parent_id, depth, upvotes, downvotes, body, created_at, last_modified_at, is_deleted, deleted_at, popularity
`

type UpdateCommentParams struct {
	ID   int64  `json:"id"`
	Body string `json:"body"`
}

func (q *Queries) UpdateComment(ctx context.Context, arg UpdateCommentParams) (Comment, error) {
	row := q.db.QueryRow(ctx, updateComment, arg.ID, arg.Body)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PostID,
		&i.ParentID,
		&i.Depth,
		&i.Upvotes,
		&i.Downvotes,
		&i.Body,
		&i.CreatedAt,
		&i.LastModifiedAt,
		&i.IsDeleted,
		&i.DeletedAt,
		&i.Popularity,
	)
	return i, err
}

const voteComment = `-- name: VoteComment :one
SELECT id, user_id, post_id, parent_id, depth, upvotes, downvotes, body, created_at, last_modified_at, is_deleted, deleted_at, popularity FROM vote_comment(
  p_user_id := $1,
  p_comment_id := $2,
  p_vote := $3   
)
`

type VoteCommentParams struct {
	PUserID    int64 `json:"p_user_id"`
	PCommentID int64 `json:"p_comment_id"`
	PVote      int32 `json:"p_vote"`
}

func (q *Queries) VoteComment(ctx context.Context, arg VoteCommentParams) (Comment, error) {
	row := q.db.QueryRow(ctx, voteComment, arg.PUserID, arg.PCommentID, arg.PVote)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PostID,
		&i.ParentID,
		&i.Depth,
		&i.Upvotes,
		&i.Downvotes,
		&i.Body,
		&i.CreatedAt,
		&i.LastModifiedAt,
		&i.IsDeleted,
		&i.DeletedAt,
		&i.Popularity,
	)
	return i, err
}
